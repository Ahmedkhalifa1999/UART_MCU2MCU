
MCU2_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000026e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006e4  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008bf  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_11>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  7a:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <callback>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART.h"

void callback(char data){};
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	0f 90       	pop	r0
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <UART_init>:
void (*callbackPtr)(char data) = callback;

void UART_init(directionMode dir, charSize cSize) {
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <UART_init+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	6a 83       	std	Y+2, r22	; 0x02
	UCSRC = UCSRC | (1 << 7);
  a4:	a0 e4       	ldi	r26, 0x40	; 64
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e0 e4       	ldi	r30, 0x40	; 64
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & ~ 0x06) | (cSize); /*Set character size*/
  b2:	a0 e4       	ldi	r26, 0x40	; 64
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e0 e4       	ldi	r30, 0x40	; 64
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	98 2f       	mov	r25, r24
  be:	99 7f       	andi	r25, 0xF9	; 249
  c0:	8a 81       	ldd	r24, Y+2	; 0x02
  c2:	89 2b       	or	r24, r25
  c4:	8c 93       	st	X, r24
	UCSRA |= (1<<U2X);
  c6:	ab e2       	ldi	r26, 0x2B	; 43
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8c 93       	st	X, r24
	UBRRH = 0x80;
  d4:	e0 e4       	ldi	r30, 0x40	; 64
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
	UBRRL = 25; /*set Baud Rate too 9600*/
  dc:	e9 e2       	ldi	r30, 0x29	; 41
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	89 e1       	ldi	r24, 0x19	; 25
  e2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & ~0x18) | (dir); /*Receiver & Transmitter Enable Bits)*/
  e4:	aa e2       	ldi	r26, 0x2A	; 42
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e2       	ldi	r30, 0x2A	; 42
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	98 2f       	mov	r25, r24
  f0:	97 7e       	andi	r25, 0xE7	; 231
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	89 2b       	or	r24, r25
  f6:	8c 93       	st	X, r24
}
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <UART_setCallback>:

void UART_setCallback(void (*fn)(char data)) {
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <UART_setCallback+0x6>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (1<<RXCIE);
 110:	aa e2       	ldi	r26, 0x2A	; 42
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ea e2       	ldi	r30, 0x2A	; 42
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8c 93       	st	X, r24
	callbackPtr = fn;
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	90 93 61 00 	sts	0x0061, r25
 126:	80 93 60 00 	sts	0x0060, r24
}
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <UART_send>:

void UART_send(char data) {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	0f 92       	push	r0
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1<<UDRE))); /*waiting for Transmit Data Register to be empty*/
 140:	eb e2       	ldi	r30, 0x2B	; 43
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 72       	andi	r24, 0x20	; 32
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	b9 f3       	breq	.-18     	; 0x140 <UART_send+0xc>
	UDR = data;
 152:	ec e2       	ldi	r30, 0x2C	; 44
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	80 83       	st	Z, r24
}
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <UART_receive>:

char UART_receive() {
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1<<RXC))); /*Waiting for Receive Data to complete*/
 16a:	eb e2       	ldi	r30, 0x2B	; 43
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	dc f7       	brge	.-10     	; 0x16a <UART_receive+0x8>
	return UDR;
 174:	ec e2       	ldi	r30, 0x2C	; 44
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
}
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <__vector_11>:

ISR(USART_RXC_vect) {
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	df 93       	push	r29
 1a4:	cf 93       	push	r28
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	callbackPtr(UDR);
 1aa:	e0 91 60 00 	lds	r30, 0x0060
 1ae:	f0 91 61 00 	lds	r31, 0x0061
 1b2:	ac e2       	ldi	r26, 0x2C	; 44
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	8c 91       	ld	r24, X
 1b8:	09 95       	icall
}
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <main>:

#include <avr/io.h>

void motor(char comm);

int main(void) {
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setPortDirection(PORTA_ID, PORT_OUTPUT);
 1e8:	ea e3       	ldi	r30, 0x3A	; 58
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	80 83       	st	Z, r24

	UART_init(RECEIVE, FIVE);
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>

	SREG |= (1 << 7);
 1f8:	af e5       	ldi	r26, 0x5F	; 95
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	ef e5       	ldi	r30, 0x5F	; 95
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 68       	ori	r24, 0x80	; 128
 204:	8c 93       	st	X, r24
	UART_setCallback(motor);
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 81 00 	call	0x102	; 0x102 <UART_setCallback>
 20e:	ff cf       	rjmp	.-2      	; 0x20e <main+0x2e>

00000210 <motor>:

	while(1);
}

void motor(char comm) {
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	00 d0       	rcall	.+0      	; 0x216 <motor+0x6>
 216:	0f 92       	push	r0
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	89 83       	std	Y+1, r24	; 0x01
	switch (comm) {
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	3b 83       	std	Y+3, r19	; 0x03
 226:	2a 83       	std	Y+2, r18	; 0x02
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	9b 81       	ldd	r25, Y+3	; 0x03
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	69 f0       	breq	.+26     	; 0x24c <motor+0x3c>
 232:	2a 81       	ldd	r18, Y+2	; 0x02
 234:	3b 81       	ldd	r19, Y+3	; 0x03
 236:	22 30       	cpi	r18, 0x02	; 2
 238:	31 05       	cpc	r19, r1
 23a:	69 f0       	breq	.+26     	; 0x256 <motor+0x46>
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	9b 81       	ldd	r25, Y+3	; 0x03
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	69 f4       	brne	.+26     	; 0x25e <motor+0x4e>
	case 0:
		GPIO_writePort(PORTA_ID, 0);
 244:	eb e3       	ldi	r30, 0x3B	; 59
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	10 82       	st	Z, r1
 24a:	09 c0       	rjmp	.+18     	; 0x25e <motor+0x4e>
		break;
	case 1:
		GPIO_writePort(PORTA_ID, 3);
 24c:	eb e3       	ldi	r30, 0x3B	; 59
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	80 83       	st	Z, r24
 254:	04 c0       	rjmp	.+8      	; 0x25e <motor+0x4e>
		break;
	case 2:
		GPIO_writePort(PORTA_ID, 5);
 256:	eb e3       	ldi	r30, 0x3B	; 59
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	80 83       	st	Z, r24
		break;
	}
}
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	cf 91       	pop	r28
 266:	df 91       	pop	r29
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
